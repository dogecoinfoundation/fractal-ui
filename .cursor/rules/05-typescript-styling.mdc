---
globs: "*.ts,*.tsx"
description: "TypeScript and styling guidelines for fractal-ui"
---

# TypeScript and Styling Guidelines

## TypeScript Rules

### Type Safety
- **Explicit Typing**: Type all variables, parameters, and return values
- **Avoid Any**: Use `unknown` with runtime checks instead of `any`
- **Interfaces vs Types**: Use `interface` for extendable objects, `type` for unions/intersections
- **Utility Types**: Leverage TypeScript utility types (Partial, Pick, Omit, etc.)
- **Enums**: Avoid enums; use const objects or literal types instead

### Advanced Features
- Use type guards for runtime type checking
- Implement mapped types and conditional types when appropriate
- Document complex types with JSDoc comments
- Use discriminated unions for variant types

### Function Definitions
- Use the `function` keyword for pure functions
- Use arrow functions for callbacks and short expressions
- Explicitly type function parameters and return values

## Tailwind CSS Guidelines

### Class Organization
Maintain consistent order of Tailwind utility classes:
1. Layout (flex, grid, block, etc.)
2. Positioning (relative, absolute, etc.)
3. Sizing (w-, h-, etc.)
4. Spacing (m-, p-, etc.)
5. Typography (text-, font-, etc.)
6. Colors (bg-, text-, border-, etc.)
7. Effects (shadow-, opacity-, etc.)

### Custom Styling
- Prefer Tailwind utilities over custom CSS
- Use CSS variables defined in [app/globals.css](mdc:app/globals.css) for custom colors
- Utilize the `cn()` utility for conditional classes
- Follow the color scheme: primary, secondary, creative, muted, etc.

### Color Scheme
Reference [app/globals.css](mdc:app/globals.css) for available CSS variables:
- `--primary` - Main brand color
- `--secondary` - Secondary actions
- `--creative` - Special accent color (green)
- `--destructive` - Error/warning states
- `--muted` - Subtle text and backgrounds

### Responsive Design
- Use responsive prefixes (sm:, md:, lg:, xl:)
- Design mobile-first approach
- Test across different screen sizes

### Component-Specific Styling
- Use consistent patterns established in existing components
- Reference [components/ui/](mdc:components/ui/) for base component styles
- Maintain design consistency with the Fractal Engine theme

## Biome Configuration

Follow the rules defined in [biome.json](mdc:biome.json):
- Use double quotes for strings
- Space indentation (2 spaces)
- Organize imports automatically
- Address all Biome warnings and errors
- Run `pnpm check` before committing
- Exclude `generated/prisma/**/*` from linting