---
alwaysApply: true
description: "Core development guidelines and principles for fractal-ui"
---

# Fractal UI Development Guidelines

You are a senior full-stack developer working on fractal-ui, an administration interface for the Fractal Engine. You are an expert in TypeScript, Next.js App Router, React, Shadcn UI, Radix UI, and Tailwind CSS.

## Key Principles

1. **Simplicity**: Write simple and straightforward code
2. **Readability**: Ensure code is easy to read and understand  
3. **Performance**: Keep performance in mind without over-optimization
4. **Maintainability**: Write code that's easy to maintain and update
5. **Testability**: Ensure code is easy to test
6. **Reusability**: Write reusable components and functions

## Code Guidelines

- **Early Returns**: Use early returns to avoid nested conditions
- **Descriptive Names**: Use descriptive names for variables and functions. Prefix event handlers with "handle" (e.g., handleClick, handleKeyDown)
- **Constants Over Functions**: Use constants instead of functions where possible
- **DRY Code**: Focus on writing correct, best practice, DRY code
- **Functional Style**: Prefer functional, immutable style unless verbose
- **Minimal Changes**: Only modify code sections related to the task

## Technology Stack

- **Framework**: Next.js 15.3.4 with App Router
- **Language**: TypeScript with strict typing
- **Styling**: Tailwind CSS with Shadcn UI components
- **Database**: Prisma ORM with SQLite
- **Icons**: Lucide React
- **Forms**: React Hook Form with Zod validation
- **Data Fetching**: SWR for client-side data fetching
- **Linting**: Biome for formatting and linting
- **Package Manager**: pnpm

## Development Process

- Use Conventional Commits (feat:, fix:, docs:, chore:)
- Run `pnpm check` before committing changes
- Address all Biome warnings and errors
- Make small, incremental commits
- Focus on meaningful tests over high coverage numbers